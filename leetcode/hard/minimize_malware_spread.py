class Solution:
    def countNodesAndInfectedDFS(self, node, visited):
        num_nodes = 1
        num_initial = 1 if node in self.initial else 0

        for neighbor, isNeighbor in enumerate(self.graph[node]):
            if isNeighbor and neighbor not in visited:
                visited.add(neighbor)
                tmp = self.countNodesAndInfectedDFS(neighbor, visited)
                num_nodes += tmp[0]
                num_initial += tmp[1]
        return (num_nodes, num_initial)

    def minMalwareSpread(self, graph, initial) -> int:
        self.graph = graph
        self.initial = initial

        best_reduction = 0
        best_node = -1

        visited = set([])
        for init in initial:
            if init not in visited:
                visited.add(init)
                res = self.countNodesAndInfectedDFS(init, visited)
                if res[1] == 1:
                    # only initial node in this component is this one - removing will uninfect all nodes in the component
                    if res[0] > best_reduction:
                        best_node = init
                        best_reduction = res[0]
                    elif res[0] == best_reduction:
                        best_node = min(init, best_node)
        return best_node if best_node > 0 else min(initial)
